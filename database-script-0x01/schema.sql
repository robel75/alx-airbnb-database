CREATE DATABASE AIRBNB;
USE AIRBNB;
CREATE TABLE USER(
   USER_ID CHAR(36) PRIMARY KEY ,
   FIRST_NAME VARCHAR(50) NOT NULL,
   LAST_NAME VARCHAR(50) NOT NULL,
   EMAIL VARCHAR(50) NOT NULL UNIQUE,
   PASSWORD_HASH VARCHAR(50) NOT NULL,
   PHONE_NUMBER VARCHAR(50),
   ROLE ENUM('GUEST','HOST','ADMIN') NOT NULL,
   CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

DELIMITER $$
CREATE TRIGGER USER_ID_UUID
BEFORE INSERT ON USER
FOR EACH ROW
BEGIN
IF NEW.USER_ID IS NULL THEN
SET NEW.USER_ID = UUID();
END IF;
END $$
DELIMITER;

CREATE TABLE PROPERTY(
     PROPERTY_ID CHAR(36) PRIMARY KEY,
     HOST_ID CHAR(36),
     NAME VARCHAR(50) NOT NULL,
     DESCRIPTION TEXT NOT NULL,
     LOCATION VARCHAR(50) NOT NULL,
     PRICEPERNIGHT DECIMAL(10,2) NOT NULL,
     CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
     UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
     FOREIGN KEY(HOST_ID) REFERENCES USER(USER_ID)
);

CREATE TRIGGER PROPERTY_ID_UUID
BEFORE INSERT ON PROPERTY
FOR EACH ROW
SET NEW.PROPERTY_ID= UUID();

CREATE TABLE BOOKING(
     BOOKING_ID CHAR(36) PRIMARY KEY,
     PROPERTY_ID CHAR(36),
     USER_ID CHAR(36),
     START_DATE DATE NOT NULL,
     END_DATE DATE NOT NULL,
     TOTAL_PRICE DECIMAL(10,2) NOT NULL,
     STATUS ENUM('PENDING','CONFIRMED','CANCELLED') NOT NULL,
     CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
     FOREIGN KEY(PROPERTY_ID) REFERENCES PROPERTY(PROPERTY_ID),
     FOREIGN KEY(USER_ID) REFERENCES USER(USER_ID)
);

CREATE TRIGGER BOOKING_ID_UUID
BEFORE INSERT ON BOOKING
FOR EACH ROW
SET NEW.BOOKING_ID = UUID();

CREATE TABLE PAYMENT(
     PAYMENT_ID CHAR(36) PRIMARY KEY,
     BOOKING_ID CHAR(36),
     AMOUNT DECIMAL(10,2) NOT NULL,
     PAYMENT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
     PAYMENT_METHOD ENUM('CREDIT_CARD', 'PAYPAL', 'STRIPE') NOT NULL,
     FOREIGN KEY(BOOKING_ID) REFERENCES BOOKING(BOOKING_ID)
);

CREATE TRIGGER PAYMENT_ID_UUID
BEFORE INSERT ON PAYMENT
FOR EACH ROW
SET NEW.PAYMENT_ID = UUID();

CREATE TABLE REVIEW(
     REVIEW_ID CHAR(36) PRIMARY KEY,
     PROPERTY_ID CHAR(36),
     USER_ID CHAR(36),
     RATING INT CHECK(RATING>= 1 AND RATING <=5) NOT NULL,
     COMMENT TEXT NOT NULL,
     CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
     FOREIGN KEY(PROPERTY_ID) REFERENCES PROPERTY(PROPERTY_ID),
     FOREIGN KEY(USER_ID) REFERENCES USER(USER_ID)
);

CREATE TRIGGER REVIEW_ID_UUID
BEFORE INSERT ON REVIEW
FOR EACH ROW
SET NEW.REVIEW_ID= UUID();

CREATE TABLE MESSAGE(
     MESSAGE_ID CHAR(36) PRIMARY KEY,
     SENDER_ID CHAR(36),
     RECIPIENT_ID CHAR(36),
     MESSAGE_BODY TEXT NOT NULL,
     SENT_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
     FOREIGN KEY(SENDER_ID) REFERENCES USER(USER_ID),
     FOREIGN KEY(RECIPIENT_ID) REFERENCES USER(USER_ID)
);

CREATE TRIGGER MESSAGE_ID_UUID
BEFORE INSERT ON MESSAGE
FOR EACH ROW
SET NEW.MESSAGE_ID= UUID();